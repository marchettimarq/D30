// v3.7 core
const KEY="discipline30_v9";
const TEMPLATE_TASKS=[
  {name:"Workout #1 (≥30 min)",key:"w1",optional:false},
  {name:"Workout #2 (≥30 min, preferably outdoors)",key:"w2",optional:false},
  {name:"10K Steps",key:"steps",optional:false},
  {name:"Drink 3L water",key:"water",optional:false},
  {name:"Log Food",key:"logfood",optional:false},
  {name:"Read 20+ minutes",key:"read",optional:false}
];
const PRESET_PLAN = ["Run","Long Run","Long Walk","Strength","Yoga/Mobility","Swim","Tempo/Speed","Bike","Row","Meal Prep","Grocery Shop","Rest","Stretch"];
const DEFAULT_WEEKLY_PLAN={ "Mon":[],"Tue":[],"Wed":[],"Thu":[],"Fri":[],"Sat":[],"Sun":[] };

function newState(){return{settings:{palette:"soft",programDaysTotal:180,phaseLength:30,startDate:null,
  weeklyPlan: JSON.parse(JSON.stringify(DEFAULT_WEEKLY_PLAN)),tasks: JSON.parse(JSON.stringify(TEMPLATE_TASKS)),
  configured:false,phasesChosen:6,usedTemplate:true},logs:{}};}
let STATE = JSON.parse(localStorage.getItem(KEY) || "null") || newState();
function save(){ localStorage.setItem(KEY, JSON.stringify(STATE)); }
function dateKey(d){ const y=d.getFullYear(), m=String(d.getMonth()+1).padStart(2,'0'), da=String(d.getDate()).padStart(2,'0'); return `${y}-${m}-${da}`; }
function dayNumber(startISO,today){ const [Y,M,D]=startISO.split('-').map(n=>+n); const start=new Date(Y, M-1, D); start.setHours(0,0,0,0); const t=new Date(today); t.setHours(0,0,0,0); return Math.max(1, Math.floor((t-start)/(1000*60*60*24))+1); }
function phaseOfDay(n,len){ return Math.ceil(n/len); }
function applyPalette(name){ const r=document.documentElement.style; if(name==="dark"){r.setProperty('--bg','var(--bg-dark)');r.setProperty('--card','var(--card-dark)');r.setProperty('--ink','var(--ink-dark)');r.setProperty('--muted','var(--muted-dark)');r.setProperty('--line','var(--line-dark)');r.setProperty('--accent','var(--accent-dark)');} else {r.setProperty('--bg','#f7f7f8');r.setProperty('--card','#ffffff');r.setProperty('--ink','#121417');r.setProperty('--muted','#6f7782');r.setProperty('--line','#e7e8ea');r.setProperty('--accent','#58bfa0');}}
applyPalette(STATE.settings.palette);
function todaysTasks(date){ const dow=date.getDay(); const list=[]; for(const t of STATE.settings.tasks){ if(t.onlySunday && dow!==0) continue; if(t.onlyWeekdays && (dow===0||dow===6)) continue; list.push(t);} return list; }
function renderPhaseDashboard(dayNum){ const pills=document.getElementById("phasePills"); if(!pills) return; pills.innerHTML=""; const total=STATE.settings.programDaysTotal; const len=STATE.settings.phaseLength; const currentPhase=Math.ceil(dayNum/len); for(let i=1;i<=total/len;i++){ const span=document.createElement("div"); span.className="phase-pill"+(i===currentPhase?" active":""); span.textContent=`P${i}`; pills.appendChild(span);}}
function renderAll(){ const start = STATE.settings.startDate; if(!start){ ensureOnboarding(); return; } const today=new Date(); const s=STATE.settings, logs=STATE.logs; const dayNum=dayNumber(start,today); const phaseNum=phaseOfDay(dayNum,s.phaseLength); document.getElementById("dayInfo").textContent=`Phase ${phaseNum} · Day ${((dayNum-1)%s.phaseLength)+1} / ${s.phaseLength}`; document.getElementById("dowBadge").textContent=today.toLocaleDateString(undefined,{weekday:'long'}); document.getElementById("progressBar").style.width=`${(((dayNum-1)%s.phaseLength)+1)/s.phaseLength*100}%`; renderPhaseDashboard(dayNum);
  const key=dateKey(today); const rec = logs[key] || (logs[key]={tasks:{},plan:{},note:"",completed:false}); const list = todaysTasks(today); const box = document.getElementById("dailyList"); box.innerHTML=""; list.forEach((t)=>{ const id=`t_${t.key}`; const li=document.createElement("div"); li.className="card"+(rec.tasks[id]?" done":"")+(t.optional?" optional":""); const cb=document.createElement("div"); cb.className="checkbox"; cb.innerHTML = `<svg viewBox="0 0 24 24"><circle class="circ" cx="12" cy="12" r="9"></circle><path class="tick" d="M7 12.5l3 3.5 7-8"></path></svg>`; cb.addEventListener("click",(e)=>{ e.stopPropagation(); rec.tasks[id]=!rec.tasks[id]; save(); renderAll(); }); const title=document.createElement("div"); title.className="title"; title.textContent=t.name; const hint=document.createElement("div"); hint.className="hint"; hint.textContent=t.optional?"Optional":"Required"; li.appendChild(cb); li.appendChild(title); li.appendChild(hint); li.addEventListener("click",()=>{ rec.tasks[id]=!rec.tasks[id]; save(); renderAll(); }); if(rec.tasks[id]) li.classList.add("done"); else li.classList.remove("done"); box.appendChild(li); });
  const planBox=document.getElementById("planList"); planBox.innerHTML=""; const dowLong=today.toLocaleDateString(undefined,{weekday:'long'}); const dowShort=today.toLocaleDateString(undefined,{weekday:'short'}); const plan = (s.weeklyPlan[dowShort] || s.weeklyPlan[dowLong]) || []; plan.forEach((name, idx)=>{ const id=`p_${idx}`; const li=document.createElement("div"); li.className="card"+(rec.plan&&rec.plan[id]?" done":""); const cb=document.createElement("div"); cb.className="checkbox"; cb.innerHTML = `<svg viewBox="0 0 24 24"><circle class="circ" cx="12" cy="12" r="9"></circle><path class="tick" d="M7 12.5l3 3.5 7-8"></path></svg>`; cb.addEventListener("click",(e)=>{ e.stopPropagation(); rec.plan = rec.plan||{}; rec.plan[id]=!rec.plan[id]; save(); renderAll(); }); const title=document.createElement("div"); title.className="title"; title.textContent=name; const hint=document.createElement("div"); hint.className="hint"; hint.textContent="Tap to toggle"; li.appendChild(cb); li.appendChild(title); li.appendChild(hint); li.addEventListener("click",()=>{ rec.plan = rec.plan||{}; rec.plan[id]=!rec.plan[id]; save(); renderAll(); }); if(rec.plan&&rec.plan[id]) li.classList.add("done"); else li.classList.remove("done"); planBox.appendChild(li); });
  const note=document.getElementById("noteBox"); note.value=rec.note||""; note.oninput=()=>{ rec.note = note.value; save(); };
  buildCurrentMonthCalendar();
}
function buildCurrentMonthCalendar(){ const grid=document.getElementById("calendarGrid"); grid.innerHTML=""; const logs=STATE.logs; const now=new Date(); const first=new Date(now.getFullYear(), now.getMonth(), 1); const lastDay=new Date(now.getFullYear(), now.getMonth()+1, 0).getDate(); document.getElementById("calTitle").textContent = now.toLocaleDateString(undefined,{month:'long',year:'numeric'}); const weekdays=["Mon","Tue","Wed","Thu","Fri","Sat","Sun"]; weekdays.forEach(w=>{ const h=document.createElement("div"); h.className="cal-head"; h.textContent=w; grid.appendChild(h); }); const weekday = (first.getDay()+6)%7; for(let i=0;i<weekday;i++){ const b=document.createElement("div"); b.className="cal-cell"; b.style.visibility="hidden"; grid.appendChild(b); } const todayKey = dateKey(new Date()); for(let d=1; d<=lastDay; d++){ const dateObj = new Date(now.getFullYear(), now.getMonth(), d); const key = dateKey(dateObj); const rec=logs[key]; const cell=document.createElement("div"); cell.className="cal-cell"; if(key===todayKey) cell.classList.add("today"); if(dateObj < new Date(todayKey.replace(/-/g,'/'))) cell.classList.add("past"); if(rec){ if(rec.completed){ cell.classList.add("done"); cell.textContent=d+" ✓"; } else { cell.classList.add("past"); cell.classList.add("missed"); cell.textContent=d+" ×"; } } else { cell.textContent = d.toString(); } cell.addEventListener("click",()=>openPastDay(key)); grid.appendChild(cell); }}
function requiredComplete(date){ const list=todaysTasks(date); const rec=STATE.logs[dateKey(date)] || {tasks:{}}; for(const t of list){ if(t.optional) continue; if(!rec.tasks[`t_${t.key}`]) return false; } return true; }
function highlightMissed(){ const today=new Date(); const list=todaysTasks(today); const rec=STATE.logs[dateKey(today)] || {tasks:{}}; const cards=[...document.getElementById("dailyList").children]; cards.forEach((card, idx)=>{ const t=list[idx]; const id=`t_${t.key}`; card.classList.remove("warn"); if(!t.optional && !rec.tasks[id]) card.classList.add("warn"); }); }
function finishDay(){ const today=new Date(); if(!requiredComplete(today)){ highlightMissed(); openConfirm(); return; } buildTodayRecap(); openRecap(); }
function buildTodayRecap(){ const today=new Date(); const list=todaysTasks(today); const rec=STATE.logs[dateKey(today)] || (STATE.logs[dateKey(today)]={tasks:{},plan:{},note:"",completed:false}); const container=document.getElementById("recapList"); container.innerHTML=""; list.forEach(t=>{ const ok=!!rec.tasks[`t_${t.key}`]; const row=document.createElement("div"); row.textContent=`${ok?"✓":"○"}  ${t.name}${t.optional?" (optional)":""}`; container.appendChild(row); }); document.getElementById("recapPositive").value = rec.note||""; }
function saveRecapAndComplete(){ const today=new Date(); const rec=STATE.logs[dateKey(today)] || (STATE.logs[dateKey(today)]={tasks:{},plan:{},note:"",completed:false}); rec.note = document.getElementById("recapPositive").value || rec.note || ""; rec.completed=true; save(); closeRecap(); renderAll(); }
function openPastDay(key){ const dateObj=new Date(key.replace(/-/g,'/')); const rec = STATE.logs[key] || (STATE.logs[key]={tasks:{},plan:{},note:"",completed:false}); const container=document.getElementById("recapList"); container.innerHTML=""; const list = todaysTasks(dateObj); list.forEach(t=>{ const ok = !!rec.tasks[`t_${t.key}`]; const row=document.createElement("div"); row.textContent = `${ok?"✓":"○"}  ${t.name}${t.optional?" (optional)":""}`; row.addEventListener("click",()=>{ rec.tasks[`t_${t.key}`]=!ok; save(); openPastDay(key); }); container.appendChild(row); }); const pos=document.getElementById("recapPositive"); pos.value = rec.note||""; document.getElementById("btnRecapSave").onclick = ()=>{ rec.note = pos.value||rec.note||""; rec.completed = true; save(); closeRecap(); renderAll(); }; openRecap(); }
function openConfirm(){ document.getElementById("confirmModal").style.display="flex"; document.body.classList.add("no-scroll"); }
function closeConfirm(){ document.getElementById("confirmModal").style.display="none"; document.body.classList.remove("no-scroll"); }
function openRecap(){ document.getElementById("recapModal").style.display="flex"; document.body.classList.add("no-scroll"); }
function closeRecap(){ document.getElementById("recapModal").style.display="none"; document.body.classList.remove("no-scroll"); }
function openSettings(){ document.body.classList.add("no-scroll"); document.getElementById("settingsModal").style.display="flex"; const s=STATE.settings; const host=document.getElementById("settingsAnchors"); host.innerHTML=""; s.tasks.forEach((t,idx)=>{ const row=document.createElement("div"); row.className="settings-row"; const nameInput=document.createElement("input"); nameInput.type="text"; nameInput.value=t.name; const toggle=document.createElement("button"); toggle.textContent=t.optional?"Optional":"Required"; toggle.className="icon-btn"; toggle.addEventListener("click",()=>{ t.optional=!t.optional; toggle.textContent=t.optional?"Optional":"Required"; }); const del=document.createElement("button"); del.textContent="Delete"; del.className="delete-btn"; del.addEventListener("click",()=>{ s.tasks.splice(idx,1); save(); openSettings(); }); row.appendChild(nameInput); row.appendChild(toggle); row.appendChild(del); nameInput.addEventListener("input",()=>{ t.name = nameInput.value; }); host.appendChild(row); }); const editor=document.getElementById("weeklyEditor"); editor.innerHTML=""; const days=["Mon","Tue","Wed","Thu","Fri","Sat","Sun"]; days.forEach(day=>{ const row=document.createElement("div"); row.className="settings-row"; const label=document.createElement("strong"); label.textContent=day; const input=document.createElement("input"); input.type="text"; input.value=(s.weeklyPlan[day]||[]).join(", "); const addBtn=document.createElement("button"); addBtn.className="icon-btn"; addBtn.textContent="+ Add preset"; addBtn.onclick=()=>{ const sel=document.createElement("select"); sel.className="select"; PRESET_PLAN.forEach(p=>{ const o=document.createElement("option"); o.value=p; o.textContent=p; sel.appendChild(o); }); const ok=document.createElement("button"); ok.className="icon-btn"; ok.textContent="Add"; const wrap=document.createElement("div"); wrap.className="inline"; wrap.appendChild(sel); wrap.appendChild(ok); row.appendChild(wrap); ok.onclick=()=>{ const arr=input.value.split(",").map(x=>x.trim()).filter(Boolean); arr.push(sel.value); input.value=arr.join(", "); row.removeChild(wrap); }; }; row.appendChild(label); row.appendChild(input); row.appendChild(addBtn); editor.appendChild(row); }); }
function saveSettings(){ const s=STATE.settings; const rows=[...document.querySelectorAll("#weeklyEditor .settings-row")]; const days=["Mon","Tue","Wed","Thu","Fri","Sat","Sun"]; days.forEach((day,i)=>{ const input=rows[i].querySelector("input"); s.weeklyPlan[day]=input.value.split(",").map(x=>x.trim()).filter(Boolean); }); save(); closeSettings(); renderAll(); }
function closeSettings(){ document.getElementById("settingsModal").style.display="none"; document.body.classList.remove("no-scroll"); }
function toggleNewTaskMode(){ const btn=document.getElementById("newTaskRequired"); btn.textContent = (btn.textContent==="Required") ? "Optional" : "Required"; }
function addTask(){ const name=document.getElementById("newTaskName").value.trim(); if(!name) return; const req=document.getElementById("newTaskRequired").textContent==="Required"; STATE.settings.tasks.push({name, key: name.toLowerCase().replace(/[^a-z0-9]+/g,'_').slice(0,20), optional:!req}); document.getElementById("newTaskName").value=""; save(); openSettings(); }
function setPalette(name){ STATE.settings.palette=name; save(); applyPalette(name); }
function ensureOnboarding(){ const ob=document.getElementById("onboard"); if(STATE.settings.configured){ ob.style.display="none"; return; } ob.style.display="block"; const startInput=document.getElementById("startDateInput"); const todayStr = dateKey(new Date()); startInput.value = todayStr;
  const pc=document.getElementById("phaseChoices"); pc.innerHTML=""; for(let i=1;i<=6;i++){ const b=document.createElement("div"); b.className="pill"+(i===STATE.settings.phasesChosen?" active":""); b.textContent=i; b.addEventListener("click",()=>{ STATE.settings.phasesChosen=i; STATE.settings.programDaysTotal=i*30; save(); ensureOnboarding(); }); pc.appendChild(b); }
  const useBtn=document.getElementById("useTemplate"); const ownBtn=document.getElementById("createOwn"); const customWrap=document.getElementById("customWrap"); const chipsHost=document.getElementById("templateChips");
  function renderChips(){ chipsHost.innerHTML=""; TEMPLATE_TASKS.forEach(t=>{ const chip=document.createElement("button"); chip.className="icon-btn"; chip.textContent=`+ ${t.name}`; chip.onclick=()=>{ if(STATE.settings.usedTemplate){ STATE.settings.usedTemplate=false; STATE.settings.tasks=[]; } STATE.settings.tasks.push({...t}); customWrap.classList.remove("hidden"); syncChoice(); renderCustomList(); }; chipsHost.appendChild(chip); }); }
  function renderCustomList(){ const list=document.getElementById("customList"); list.innerHTML=""; STATE.settings.tasks.forEach((t,idx)=>{ const chip=document.createElement("span"); chip.className="taskchip"; chip.textContent = t.name + (t.optional?" (optional)":""); const rm=document.createElement("button"); rm.className="rm"; rm.textContent="×"; rm.onclick=()=>{ STATE.settings.tasks.splice(idx,1); save(); renderCustomList(); renderPreview(); }; chip.appendChild(rm); list.appendChild(chip); }); }
  function renderPreview(){ const host=document.getElementById("templatePreview"); host.innerHTML=""; (STATE.settings.tasks.length?STATE.settings.tasks:TEMPLATE_TASKS).forEach(t=>{ const row=document.createElement("div"); row.className="card"; const title=document.createElement("div"); title.className="title"; title.textContent=t.name; const hint=document.createElement("div"); hint.className="hint"; hint.textContent=t.optional?"Optional":"Required"; row.appendChild(title); row.appendChild(hint); host.appendChild(row); }); }
  function syncChoice(){ useBtn.classList.toggle("selected", STATE.settings.usedTemplate); ownBtn.classList.toggle("selected", !STATE.settings.usedTemplate); if(STATE.settings.usedTemplate){ STATE.settings.tasks = JSON.parse(JSON.stringify(TEMPLATE_TASKS)); customWrap.classList.add("hidden"); } else { customWrap.classList.remove("hidden"); } renderPreview(); }
  useBtn.onclick=()=>{ STATE.settings.usedTemplate=true; save(); syncChoice(); }; ownBtn.onclick=()=>{ STATE.settings.usedTemplate=false; save(); syncChoice(); };
  document.getElementById("customReq").onclick = ()=>{ const b=document.getElementById("customReq"); b.textContent = (b.textContent==="Required") ? "Optional" : "Required"; };
  document.getElementById("customAdd").onclick = ()=>{ const name=document.getElementById("customName").value.trim(); if(!name) return; const req = document.getElementById("customReq").textContent==="Required"; if(STATE.settings.usedTemplate){ STATE.settings.usedTemplate=false; STATE.settings.tasks=[]; } STATE.settings.tasks.push({name, key:name.toLowerCase().replace(/[^a-z0-9]+/g,'_').slice(0,20), optional:!req}); document.getElementById("customName").value=""; save(); renderCustomList(); renderPreview(); ownBtn.classList.add("selected"); useBtn.classList.remove("selected"); };
  renderChips(); renderCustomList(); syncChoice();
  document.getElementById("startProgram").onclick = ()=>{ STATE.settings.startDate = document.getElementById("startDateInput").value || dateKey(new Date()); STATE.settings.configured=true; save(); ob.style.display="none"; renderAll(); };
  document.getElementById("summaryTxt").textContent = `You’ll complete ${STATE.settings.phasesChosen} phase(s). Start date: ${todayStr}.`;
}
function showTasks(){ document.getElementById("panelTasks").classList.remove("hidden"); document.getElementById("panelCalendar").classList.add("hidden"); document.getElementById("tabTasks").classList.add("active"); document.getElementById("tabCalendar").classList.remove("active"); }
function showCalendar(){ document.getElementById("panelCalendar").classList.remove("hidden"); document.getElementById("panelTasks").classList.add("hidden"); document.getElementById("tabCalendar").classList.add("active"); document.getElementById("tabTasks").classList.remove("active"); buildCurrentMonthCalendar(); }
window.addEventListener("DOMContentLoaded",()=>{ document.getElementById("btnFinish").addEventListener("click", ()=>{ const today=new Date(); if(!requiredComplete(today)){ highlightMissed(); openConfirm(); return; } buildTodayRecap(); openRecap(); }); document.getElementById("btnReset").addEventListener("click", ()=>{ const t=new Date(); STATE.logs[dateKey(t)]={tasks:{},plan:{},note:"",completed:false}; save(); renderAll(); }); document.getElementById("btnClear").addEventListener("click", ()=>{ if(confirm("Erase ALL saved data?")){ STATE = newState(); save(); ensureOnboarding(); }}); document.getElementById("btnCompleteNow").addEventListener("click", closeConfirm); document.getElementById("btnContinueAnyway").addEventListener("click", ()=>{ closeConfirm(); alert("Marked as incomplete. You can retry or adjust from the calendar."); }); document.getElementById("btnRecapEdit").addEventListener("click", closeRecap); document.getElementById("btnRecapSave").addEventListener("click", saveRecapAndComplete); document.getElementById("btnSettings").addEventListener("click", openSettings); document.getElementById("btnSettingsCancel").addEventListener("click", closeSettings); document.getElementById("btnSettingsSave").addEventListener("click", saveSettings); document.getElementById("palSoft").addEventListener("click", ()=>setPalette("soft")); document.getElementById("palDark").addEventListener("click", ()=>setPalette("dark")); document.getElementById("newTaskRequired").addEventListener("click", toggleNewTaskMode); document.getElementById("btnAddTask").addEventListener("click", addTask); document.getElementById("tabTasks").addEventListener("click", showTasks); document.getElementById("tabCalendar").addEventListener("click", showCalendar); if(!STATE.settings.configured){ ensureOnboarding(); } else { renderAll(); } });
